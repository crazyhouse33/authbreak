common-stuff/macro_util.h://code stolen from https://stackoverflow.com/questions/5957679/is-there-a-way-to-use-c-preprocessor-stringification-on-variadic-macro-argumen
Fichier binaire common-stuff/.argv.c.swp correspondant
common-stuff/struct/dynamic_array.c:  array->array = malloc(sizeof(void *) * size);
common-stuff/struct/dynamic_array.c:  array->size = size;
common-stuff/struct/dynamic_array.c:  while (where > array->size - 1)
common-stuff/struct/dynamic_array.c:    array->size *= 4;
common-stuff/struct/dynamic_array.c:  array->array = realloc(array->array, sizeof(void *) * array->size);
common-stuff/struct/dynamic_array.c:  array->array[where] = to_put;
common-stuff/struct/null_vec.c:  return argc - 1;
common-stuff/strings/search_string.h:#define SEARCH_ERROR_NO_MATCH -2
common-stuff/strings/search_string.h:#define SEARCH_ERROR_MATCHS_AMBIGUITY -1
common-stuff/strings/trim_string.c:  while (*string_end - 1 > begin && isspace(*(*string_end - 1))) {
common-stuff/strings/trim_string.c:    (*string_end)--;
common-stuff/strings/trim_string.c:  unsigned offset = string_end - new_begin;
common-stuff/strings/trim_string.c:  unsigned offset = new_end - new_begin;
common-stuff/strings/search_string.c:      max_index = cpt - 1;
common-stuff/strings/search_string.c:      *end_valid = string + common_part - 1;
common-stuff/strings/search_string.c:      max_index = cpt - 1;
common-stuff/strings/search_string.c:bool is_escaped(char *a_char, char escaper) { return (*(a_char - 1) != escaper) || (*(a_char - 2) == escaper); }
common-stuff/strings/search_string.c:  until--;
common-stuff/strings/search_string.c:  if (*(bloc) == to_found && *(bloc - 1) != escaper)
common-stuff/strings/search_string.c:    bloc = memchr(bloc + 1, to_found, --until);
common-stuff/strings/search_string.c:    until -= bloc - old_found - 1;
Fichier binaire common-stuff/strings/old_save_search correspondant
common-stuff/strings/replace_string.c:    while (*(src - 1));
common-stuff/strings/replace_string.c:  placeholder->base_string = base_string;
common-stuff/strings/replace_string.c:  placeholder->begin = begin - *base_string;
common-stuff/strings/replace_string.c:  placeholder->size_place = end - begin + 1;
common-stuff/strings/replace_string.c:  placeholder->size_of_string = malloc(sizeof(size_t));
common-stuff/strings/replace_string.c:  placeholder->max_size = malloc(sizeof(size_t));
common-stuff/strings/replace_string.c:  *(placeholder->size_of_string) = initial_size;
common-stuff/strings/replace_string.c:  *(placeholder->max_size) = initial_size;
common-stuff/strings/replace_string.c:  placeholder->dependant_placeholders = malloc(sizeof(Placeholder **));
common-stuff/strings/replace_string.c:  *placeholder->dependant_placeholders = (Placeholder **)create_vector(0);
common-stuff/strings/replace_string.c:  placeholder->level = 0; // so level point directely where to aime in dependance
common-stuff/strings/replace_string.c:  placeholder->base_string = base_placeholder->base_string;
common-stuff/strings/replace_string.c:  placeholder->begin = begin - *placeholder->base_string;
common-stuff/strings/replace_string.c:  placeholder->size_place = end - begin + 1;
common-stuff/strings/replace_string.c:  placeholder->size_of_string = base_placeholder->size_of_string;
common-stuff/strings/replace_string.c:  placeholder->max_size = base_placeholder->max_size;
common-stuff/strings/replace_string.c:  placeholder->dependant_placeholders = base_placeholder->dependant_placeholders;
common-stuff/strings/replace_string.c:  put_vector((void ***)base_placeholder->dependant_placeholders, (void *)placeholder);
common-stuff/strings/replace_string.c:  placeholder->level = base_placeholder->level + 1;
common-stuff/strings/replace_string.c:  if (*(placeholder->size_of_string) > *(placeholder->max_size)) {                   // too big
common-stuff/strings/replace_string.c:    *(placeholder->max_size) = (PLACEHOLDERMARGIN + *(placeholder->size_of_string)); // all the dependant placeholders are actualized at once
common-stuff/strings/replace_string.c:    *(placeholder->base_string) = realloc(*(placeholder->base_string), sizeof(char) * *(placeholder->max_size));
common-stuff/strings/replace_string.c:  int diff = new_subpart_len - placeholder->size_place;
common-stuff/strings/replace_string.c:    same_size_replace_fast(placeholder->begin + *(placeholder->base_string), string, placeholder->size_place);
common-stuff/strings/replace_string.c:    *(placeholder->size_of_string) += diff;
common-stuff/strings/replace_string.c:    replace_string_fast(placeholder->begin + *(placeholder->base_string), placeholder->size_place, string, new_subpart_len);
common-stuff/strings/replace_string.c:    placeholder->size_place += diff;
common-stuff/strings/replace_string.c:    Placeholder **son = *placeholder->dependant_placeholders + placeholder->level;
common-stuff/strings/replace_string.c:      (*son)->begin += diff;
common-stuff/strings/replace_string.c:    to_parse = final_end - current;
common-stuff/strings/replace_string.c:    to_parse = final_end - current;
common-stuff/strings/replace_string.c:      new_placeholder = placeholder_new_depend(res_vector[res_size - 1], begin, end);
common-stuff/enum.h:size_t name##_enum_iterator_size = MACRO_N_ARG(ENUM_DEF(ENUM_NAME))-1;\
common-stuff/enum.h://Note the -1 because we always put an useless coma
common-stuff/file_info.c:  *--name = '/';
common-stuff/file_info.c:      startp = memcpy(name - (p - path), path, p - path);
common-stuff/myread.c:  size_t new_readed = read(fd, *buffer + *string_size, *buffer_max_size - *string_size);
common-stuff/myread.c:  if (res != -1 && *buffer[res] == sep)
common-stuff/argv.c:// https://opensource.apple.com/source/gcc/gcc-926/libiberty/argv.c.auto.html
common-stuff/argv.c:      if ((maxargc == 0) || (*argc >= (maxargc - 1))) {
common-stuff/argv.c:  size_t i = -1;
common-stuff/argv.c:  return -1;
common-stuff/argv.c:  if (index != -1)
common-stuff/argv.c:  size_t i = -1;
common-stuff/argv.c:    size_t offset = equal_char - envp2[i];
common-stuff/argv.c:    if (index != -1) {                                                  // to merge
common-stuff/argv.c:      if (index_in_1 != -1) { // if it is allready there, concatenate in place and dont append
common-stuff/argv.c:    strcpy(res + total_size - len_current, strings[cpt++]);
common-stuff/argv.h:	buildargv -- build an argument vector from a string
common-stuff/argv.h:	freeargv -- free an argument vector
common-stuff/argv.h:#define LIBSTDBUF_PATH "ERROR-NOT-FOUND"
main.c:  Or_combined_classifier *classifier = argument->classifier_combined;
main.c:  prepare_command_builder(argument->command_line, argument->prompt);
main.c:    Output *output = executor_get_output(command_builder_argv, command_builder_prompt, argument->prompt_cpt, current_envp, 0);
execution/output.c:  res->out = malloc(sizeof(char) * OUTPUT_BUFFER_SIZE);
execution/output.c:  res->out[0] = 0;
execution/output.c:  return read_append(fd, &out->out, string_size, &OUTPUT_BUFFER_SIZE);
execution/executor.c:  output->out[readed] = 0;
execution/executor.c:  output->term_time = get_time_ns() - t1;
execution/executor.c:  output->exit_status=WEXITSTATUS(status);
output-classifier/or_combined_classifier.c:	for (size_t i=0; i< classifier->num_groups;i++){
output-classifier/or_combined_classifier.c:		if (composed_classifier_classify_output( &classifier->groups[i], out))
output-classifier/or_combined_classifier.c:	group_class->groups= realloc(group_class->groups, group_class->num_groups+1 * sizeof(Composed_classifier));
output-classifier/or_combined_classifier.c:	group_class->groups[group_class->num_groups]= *class;
output-classifier/or_combined_classifier.c:	group_class->num_groups++;
output-classifier/composed_classifier.c:  for (int i = 0; i < classifier->num_##name; i++)                                                                                                                                                     \
output-classifier/composed_classifier.c:    if (!classifier_##type##_classify(&classifier->name##_class[i], to_classify))                                                                                                                              \
output-classifier/composed_classifier.c:      return false == classifier->target;
output-classifier/composed_classifier.c:  CLASSIFY(stringcmp, stringcmp, out->out);
output-classifier/composed_classifier.c:  CLASSIFY(diff_long, time, out->term_time);
output-classifier/composed_classifier.c:  CLASSIFY(diff_int, status_diff, out->exit_status);
output-classifier/composed_classifier.c:  CLASSIFY(eq_int, status_eq, out->exit_status);
output-classifier/composed_classifier.c:  return (classifier->num_stringcmp != 0 || classifier->num_time != 0 || classifier->num_status_diff !=0 || classifier->num_status_eq !=0) == classifier->target; // if there where no classifier in the first place, it's counted as fail
output-classifier/composed_classifier.c:	classifier->target=target;
output-classifier/common/classifier_common.c:void classifier_init_classifier_common(Classifier_common *classifier, bool target) { classifier->target = target; }
output-classifier/common/strcmp/strcmp_classifier.c:void classifier_stringcmp_init_core_value(Classifier_stringcmp *class, char *target) { class->target_string = target; }
output-classifier/common/strcmp/strcmp_classifier.c:			class->common.target= ! class->common.target;
output-classifier/common/strcmp/strcmp_classifier.c:bool classifier_stringcmp_classify_core(Classifier_stringcmp *classifier, char* target) { return strcmp(classifier->target_string, target) == 0; }
Fichier binaire output-classifier/common/.classifier_common.h.swp correspondant
Fichier binaire output-classifier/common/.classifier_common.c.swp correspondant
output-classifier/common/classifier_common.h:	return classifier_##classfier_type##_classify_core( classfier, out) ==classfier->common.target;\
output-classifier/common/classifier_common.h:	classifier_init_classifier_common(&classfier->common, target);\
output-classifier/common/nums_compare/eq/eq_classifier.h:return (classifier->target == to_classify);\
output-classifier/common/nums_compare/eq/eq_classifier.h:			classifier->common.target= ! classifier->common.target;\
output-classifier/common/nums_compare/eq/eq_classifier.h:	classifier->target =  target;\
output-classifier/common/nums_compare/diff/diff_classifier.h:return (classifier->multiplier * to_classify) < (classifier->multiplier * (classifier->target + classifier->adder));\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->adder = 0;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->multiplier = 1;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->adder = 1;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->multiplier = 1;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->adder = 0;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->multiplier = -1;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->adder = -1;\
output-classifier/common/nums_compare/diff/diff_classifier.h:    classifier->multiplier = -1;\
output-classifier/common/nums_compare/diff/diff_classifier.h:	classifier->target = (signed) target;\
Fichier binaire output-classifier/common/nums_compare/diff/int/diff_int_classifier.h.gch correspondant
interface/template_parsing/template_parser.c:  until -= option_block_end - template_string + 1;
interface/template_parsing/template_parser.c:    until -= option_block_end - template_string + 1;
interface/template_parsing/template_parser.c:    handler_separate_option(template_string, option_block_end - template_string, &key, &value, &key_size, &value_size);
interface/template_parsing/template_parser.c:        handler->type = str_to_Handler_type_no_fail(value, value_size);
interface/template_parsing/template_parser.c:  if (!guess_main_component(handler, first_begin, first_end - first_begin))
interface/template_parsing/template_parser.c:                         option_block_end - first_begin, first_begin);
interface/template_parsing/template_parser.c:    handler_parse_main_component(handler, handler->type, template_string, option_block_end - template_string); // we parse main with the good type
interface/template_parsing/template_parser.c:  until -= option_block_end - template_string + 1;
interface/template_parsing/template_parser.c:    until -= option_block_end - template_string + 1;
interface/template_parsing/template_parser.c:    handler_parse_option(handler, template_string, option_block_end - template_string);
interface/template_parsing/handler_front/handler_front.c:  handler->options.separator = *separator;
interface/template_parsing/handler_front/handler_front.c:  handler->type = str_to_Handler_type_no_fail(type, until);
interface/template_parsing/handler_front/handler_front.c:  handler->options.charset = charset;
interface/template_parsing/handler_front/handler_front.c:  handler->main_component = strndup(main, until);
interface/template_parsing/handler_front/handler_front.c:#define USE_THE_DEFAULTw -1
interface/template_parsing/handler_front/handler_front.c:#define INVALID_FORMATw -2
interface/template_parsing/handler_front/handler_front.c:#define NOT_IN_RANGE_INTw -3
interface/template_parsing/handler_front/handler_front.c:    if (attribute_len(len, &handler->options.len_max, DEFAULT_LEN_MAX)) {
interface/template_parsing/handler_front/handler_front.c:      handler->type = iterator;
interface/template_parsing/handler_front/handler_front.c:  size_t until1 = colon - main;
interface/template_parsing/handler_front/handler_front.c:  size_t until2 = until - until1 - 1;
interface/template_parsing/handler_front/handler_front.c:  if (!attribute_len(len1, &handler->options.len_min, DEFAULT_LEN_MIN))
interface/template_parsing/handler_front/handler_front.c:  if (attribute_len(len2, &handler->options.len_max, DEFAULT_LEN_MAX)) {
interface/template_parsing/handler_front/handler_front.c:    handler->type = iterator;
interface/template_parsing/handler_front/handler_front.c:  until = trimed_end - main;
interface/template_parsing/handler_front/handler_front.c:  char *key_end = get_pointer_to_last_white(option, (*value) - 1);
interface/template_parsing/handler_front/handler_front.c:  *value_size = option + until - *value;
interface/template_parsing/handler_front/handler_front.c:  *key_size = key_end - *key;
interface/template_parsing/handler_front/handler_front.c:  switch (handler->type) {
interface/template_parsing/handler_front/handler_front.c:  handler->options.charset = DEFAULT_CHARSET;
interface/template_parsing/handler_front/handler_front.c:  handler->options.len_min = DEFAULT_LEN_MIN;
interface/template_parsing/handler_front/handler_front.c:  handler->options.len_max = DEFAULT_LEN_MAX;
interface/template_parsing/handler_front/handler_front.c:  handler->options.separator = DEFAULT_SEPARATOR;
interface/cliparser.c:"An exemple of a COMMAND: 'auth_command --user INJECT --password INJECT'\n\n"
interface/cliparser.c:"			-separator=CHAR : Set the separator of the file\n"
interface/cliparser.c:"			-charset=STR : STR is a string of different characters. Every guess will contain only thoses characters. (default= abcdefghiklmnopqrstuvwxyz1234567890)\n\n";
interface/cliparser.c:	{0, 'h', 0, OPTION_HIDDEN, "Alias for --help", 0},
interface/cliparser.c:	//{"no-timing", TIMING_FAKE_KEY, 0, 0, "Skip the timing attack phase.", 1},
interface/cliparser.c:	//  {"no-guessing", GUESSING_FAKE_KEY, 0, 0, "Skip the guessing attack phase.", 1},
interface/cliparser.c:	  {"wait-prompt", 0, "SECONDS", 0, "Delay each prompt by a certain amount of seconds.", 6},
interface/cliparser.c:	  {"random-wait", 0, "SECONDS", 0, "Delay each prompt by a random amount of seconds bounded by the entered value.", 6},
interface/cliparser.c:	  {"random-wait", 'r', "SECONDS", 0, "Delay each guess by a random amount of seconds bounded by the entered value.", 6},
interface/cliparser.c:	  {"no-random", RANDOM_FAKE_KEY, 0, 0, "Without this option, Authbreak makes the order of the guesses look random. Activate this flag to turn off this behaviour to win some time.", 6},
interface/cliparser.c:	  {"no-session", 0, 0, 0, "When running, at any interuption (user or crash, authbreak saves his current state. If you invoke it with the exact same commandline, it will load his old session. This
interface/cliparser.c:	Arguments *arguments = state->input;
interface/cliparser.c:			or_combined_classifier_add(arguments->classifier_combined, arguments->current_classifier);
interface/cliparser.c:			Composed_classifier* new= composed_classifier_new(arguments->target);
interface/cliparser.c:			arguments->target=true;
interface/cliparser.c:			arguments->current_classifier=new;
interface/cliparser.c:			arguments->target=false; 
interface/cliparser.c:			arguments->no_random = true;
interface/cliparser.c:			arguments->no_guessing = true;
interface/cliparser.c:			arguments->no_timing = true;
interface/cliparser.c:			arguments->random_wait = atof(arg);
interface/cliparser.c:			arguments->wait = atof(arg);
interface/cliparser.c:			arguments->prompt[arguments->prompt_cpt++] = arg;
interface/cliparser.c:			if (arguments->current_classifier==NULL)
interface/cliparser.c:				arguments->current_classifier= composed_classifier_new(arguments->target);
interface/cliparser.c:			parse_classifier_str(arguments->current_classifier, arg);
interface/cliparser.c:			argp_state_help(state, state->err_stream, ARGP_HELP_STD_HELP);
interface/cliparser.c:			arguments->command_line = arg;
interface/cliparser.c:	arguments->no_timing = false;
interface/cliparser.c:	arguments->no_guessing = false;
interface/cliparser.c:	arguments->no_random = false;
interface/cliparser.c:	arguments->wait = 0;
interface/cliparser.c:	arguments->random_wait = 0;
interface/cliparser.c:	arguments->prompt_cpt = 0;
interface/cliparser.c:	arguments->target = true;
Fichier binaire interface/classifier/status/.strcmp_classifier_front.c.swp correspondant
interface/classifier/output_classifier_front.c:	*value_size=class_string+until-end;
interface/classifier/output_classifier_front.c:	classifier->name##_class=realloc(classifier->name##_class, sizeof(Classifier_##type) * (classifier->num_##name+1));\
interface/classifier/output_classifier_front.c:	classifier->name##_class[classifier->num_##name].common.target = !must_be_false;\
interface/classifier/output_classifier_front.c:	classifier_##type##_init_core_op(&classifier->name##_class[classifier->num_##name], class_op);\
interface/classifier/output_classifier_front.c:	classifier_##type##_init_core_value(&classifier->name##_class[classifier->num_##name++], parse_##parse_name##_classifier_str_value(class_value));\
Fichier binaire .main.c.swp correspondant
commandbuilding/handlers/iteration/iterator_handler.c:  int max = -1;
commandbuilding/handlers/iteration/iterator_handler.c:// TODO Done once, it's a permutation lut for the next character according to charset, notice how we loose a lot of memory if we use utf-8, this is a trade of speed/space because dictionnary access is
commandbuilding/handlers/iteration/iterator_handler.c:  for (i = 0; i < char_num - 1; i++) { // TODO give the furtivity option to randomize the permutation
commandbuilding/handlers/iteration/iterator_handler.c:  if (it->len > it->real_size) { // mananaging memory problemœ
commandbuilding/handlers/iteration/iterator_handler.c:    size_t new_size = it->len + ITERATOR_LEVEL_LIMIT_UPDATE;
commandbuilding/handlers/iteration/iterator_handler.c:    it->current = realloc(it->current, new_size * sizeof(char));
commandbuilding/handlers/iteration/iterator_handler.c:    it->real_size = new_size;
commandbuilding/handlers/iteration/iterator_handler.c:  for (i = 0; i < it->len; i++)
commandbuilding/handlers/iteration/iterator_handler.c:    it->current[i] = charset[0]; // TODO Initialize to first char everything for now, give the furtivity option to randomize each level base
commandbuilding/handlers/iteration/iterator_handler.c:  it->current[i] = 0;            // adding null char
commandbuilding/handlers/iteration/iterator_handler.c:  it->len++;
commandbuilding/handlers/iteration/iterator_handler.c:  Iterator_needs *needs = (Iterator_needs *)handler->special_needs;
commandbuilding/handlers/iteration/iterator_handler.c:  needs->len = handler->options.len_min;
commandbuilding/handlers/iteration/iterator_handler.c:  initiate_level(needs, handler->options.charset);
commandbuilding/handlers/iteration/iterator_handler.c:  handler->special_needs = needs;
commandbuilding/handlers/iteration/iterator_handler.c:  needs->real_size = INITIAL_ITERATOR_LEVEL_LIMIT;
commandbuilding/handlers/iteration/iterator_handler.c:  needs->current = malloc(sizeof(char) * INITIAL_ITERATOR_LEVEL_LIMIT);
commandbuilding/handlers/iteration/iterator_handler.c:  construct_next_table(&needs->charset_next_table, handler->options.charset);
commandbuilding/handlers/iteration/iterator_handler.c:  Iterator_needs *it = (Iterator_needs *)handler->special_needs;
commandbuilding/handlers/iteration/iterator_handler.c:  ssize_t offset = -1;
commandbuilding/handlers/iteration/iterator_handler.c:    if (++offset >= it->len) {                   // the level is done
commandbuilding/handlers/iteration/iterator_handler.c:      if (it->len >= handler->options.len_max) { // We need to stop(put it unlikely)
commandbuilding/handlers/iteration/iterator_handler.c:      next_level(it, handler->options.charset); // passing to next level
commandbuilding/handlers/iteration/iterator_handler.c:      return it->current;
commandbuilding/handlers/iteration/iterator_handler.c:    it->current[offset] = it->charset_next_table[it->current[offset]];
commandbuilding/handlers/iteration/iterator_handler.c:  } while (it->current[offset] == handler->options.charset[0]);
commandbuilding/handlers/iteration/iterator_handler.c:  return it->current;
commandbuilding/handlers/iteration/iterator_handler.c:  Iterator_needs *it = (Iterator_needs *)handler->special_needs;
commandbuilding/handlers/iteration/iterator_handler.c:  return it->current;
commandbuilding/handlers/iteration/iterator_handler.c:  Iterator_needs *it = (Iterator_needs *)handler->special_needs;
commandbuilding/handlers/iteration/iterator_handler.c:  free(it->current);
commandbuilding/handlers/iteration/iterator_handler.c:  free(it->charset_next_table);
commandbuilding/handlers/handler.c:  switch (emptypointer->type) {
commandbuilding/handlers/handler.c:  switch (handler->type) {
commandbuilding/handlers/handler.c:  switch (handler->type) {
commandbuilding/handlers/handler.c:  switch (handler->type) {
commandbuilding/handlers/handler.c:  free(handler->main_component);
commandbuilding/handlers/file/file_handler.c:  FILE *fp = (FILE *)handler->special_needs;
commandbuilding/handlers/file/file_handler.c:  char sep = handler->options.separator;
commandbuilding/handlers/file/file_handler.c:    if (buffer[res - 1] == '\n') { // On unix every file like to have a last \n, polluting the last guess
commandbuilding/handlers/file/file_handler.c:      buffer[res - 1] = 0;
commandbuilding/handlers/file/file_handler.c:  if (buffer[res - 1] == sep) // getdelim dont replace sep at the end
commandbuilding/handlers/file/file_handler.c:    buffer[res - 1] = 0;
commandbuilding/handlers/file/file_handler.c:  handler->special_needs = fopen(handler->main_component, "r");
commandbuilding/handlers/file/file_handler.c:void file_handler_free_needs(Handler *handler) { fclose(handler->special_needs); }
commandbuilding/commandbuild.c:    templates[i].handler = handler_new(*placeholders[i]->base_string + placeholders[i]->begin + 1, placeholders[i]->size_place - 2);
commandbuilding/commandbuild.c:  char *next_value = handler_next(current_template->handler);
commandbuilding/commandbuild.c:    placeholder_switch(current_template->placeholder, handler_get_current(current_template->handler));
commandbuilding/commandbuild.c:    if (current_template - templates > unit_num - 1) // everything had been done
commandbuilding/commandbuild.c:    next_value = handler_next(current_template->handler);
commandbuilding/commandbuild.c:  placeholder_switch(current_template->placeholder, next_value);
